select  
  xnum, ynum, znum
  , sum(sumploverx) over (partition by ynum,znum order by xnum rows between current row and znum-1 following) as sumall
from (
  with gridinput as (select 7689 grid_sn, 300 gridsize from dual)
      ,rowgen as (select level num from dual connect by 1=1 and level <= 300)
      ,powerlevel as 
        (select x.num xnum, y.num ynum
           , mod(trunc(((x.num+10)*y.num+g.grid_sn)*(x.num+10)/100),10)-5 pl
         from rowgen x, rowgen y, gridinput g
        )
  select p.xnum, p.ynum, p.pl, z.num znum
    , sum(p.pl) over (partition by p.xnum,z.num order by p.ynum rows between current row and z.num-1 following) as sumploverx
  from powerlevel p, rowgen z
  )
order by sumall desc fetch first 1 rows only
/

--90	169	15	103
/*
  square: (90,169)
  size: 15
  sum of powerlevel: 103
--about two minutes
*/

/*
But why?

"with" lets you define views, basically

// view for parameters
gridinput as (select 7689 grid_sn, 300 gridsize from dual)

// view with row values 1 to 300; I should have used gridinput.gridsize but I didn't want to mess with it
rowgen as (select level num from dual connect by 1=1 and level <= 300)

//
view that generates (x,y,powerlevel); the pl term is just derived from the problem description
no where clause, Cartesian join baby! 
//
powerlevel as 
  (select x.num xnum, y.num ynum
    , mod(trunc(((x.num+10)*y.num+g.grid_sn)*(x.num+10)/100),10)-5 pl
   from rowgen x, rowgen y, gridinput g
  )


//
I'm using view rowgen z to represent square sizes from 1 to 300
For each (x,y) and column size z, what is the sum of powerlevels?
  that is, sum( pl(x,y)+pl(x,y+1) ... pl(x, (y+(z-1)) )
  (z-1) because a window of size 1 is (x,y) to (x,y); even in sql you have the off-by-one problem
From here, I can add the (sum of columns) over a row to get the value of a square
//

, sum(p.pl) over (partition by p.xnum,z.num order by p.ynum rows between current row and z.num-1 following) as sumploverx
//
This is the magic, using the analytic version of sum().
Basically, an analytic function lets you create results for _this_ row by processing values from _other_ rows.
  For example, if I measure the outside temperature once an hour for a week, for each hour I can find:
    1) the average temperature for that day
    2) the average temperature for the hour throughout the week
    3) the difference between one hour and the previous hour

sum(p.pl) -> for this row, I want to add up p.pl from a subset of other rows
over() -> defines the subset
  partition by p.xnum,z.num -> for this row, only process data from rows with the same values for (x,z)
  order by p.ynum -> for the partition (the subset), order them by the ynum values
  rows between current row and z.num-1 following -> work on a subset of the subset; this row, the next row ... up to the next (z.num-1) rows
as sumploverx -> give this value a name
  yes, I should have called it sumplovery
//


// Now that I have all the pl sums for all the columns of length z, I'll just add up these values for rows of length z
select  
  xnum, ynum, znum
  , sum(sumploverx) over (partition by ynum,znum order by xnum rows between current row and znum-1 following) as sumall
from ()

// Finally, order the results by the sums descending but limit the output to the first row. Decending means the first row is the maximum value row.
order by sumall desc fetch first 1 rows only
